Phase: Intentions
Input: Sentence Questions QuestionMark Lookup Token SpaceToken Split ABV TempNSuggestive TempSuggestive Others CODE_LINE TempSentP TempSentN UrlPre TempNegative
Options: control = brill

/*
* Intention2 Directive
*
* Itzel Morales Ramirez, FBK, Sept 2013, Modified 18 Nov 2013: type of control from all to brill
* Modified May 25, 2015: negative opinion rule
* Modified August 2017: add abbreviations
* Rules to annotate expressed intentions of users in mailing list of OSS
*
* Intention2 refers to the communicative illocutionary acts:
* Requestive (2a) / Questions (2b) / Requirements(2c) 
*
* Category taken from the book Linguistic Communication and Speech Acts by Kent Bach and Robert M. Harnish
*
* The rules are based on the book, the examples in http://www.stanford.edu/~jurafsky/manual.august1.html, the available dataset of XWiki mailing list, and the acronyms in https://kb.iu.edu/d/ and https://blog.bufferapp.com/social-media-acronyms-abbreviations
*
*/

/***********************************QUESTION**************************************/
/* Rule that identifies the directive intention Question*/
Rule: QuestionAct
(
	(
	{Token.string=~ "[Ii]",Token.length==1}
	{SpaceToken}
	{Lookup.majorType == intention2b_vb}
	)
	|
	(
	{Questions}
	({SpaceToken}
           ({Token}|{ABV}|{Others}|{UrlPre}|{TempSentP}|{TempSentN}|{Token.string=="/"}|{Token.string=="_"}|({SpaceToken.kind==control, SpaceToken.string !=~ "[\\r]"}){Token})
           ({Token.kind=="punctuation",!Token.string=="?",Token.string!="."})[0,3]
        )[0,40]
	{QuestionMark}
	)
	|
	(
	({Token.string=="WDIM",Token.length==4}|{Token.string=~"[Ww]dim",Token.length==4}|{Token.string=="WDYM",Token.length==4}|{Token.string=~"[Ww]dym",Token.length==4}|{Token.string=~"[Ww]dyt",Token.length==4}|{Token.string=~ "[Rr]ight"}|{Token.string=~ "[Rr]eally"}){QuestionMark}
	)

): question
-->
: question
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("question");
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","QuestionAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Question", newFeatures);
}


/***********************************REQUESTIVE**************************************/
/* rule that identifies the directive intention Requestive
* Modified Sept 2017
*/
Rule: RequestiveAct
(
	(
	{Token.string=~ "[Ii]",Token.length==1}
	{SpaceToken}
	(({Token.kind==word,Token.category=="RB"}{SpaceToken})|({Token.kind==word,Token.category=="MD"}{SpaceToken}))[0,2]
	{Lookup.majorType == intention2a_vb}
	)
	|
	(
	{Token.string=~ "[Ii]",Token.length==1}
	{SpaceToken}
	({Token.string=~ "[Aa]m",Token.length==2}{SpaceToken})[0,1]
	{Lookup.majorType == intention2a_vb}
	)
	|
	(
	({Token.string=~ "[Mm]y",Token.length==2}|{Token.string=~ "[Tt]he",Token.length==3})
	{SpaceToken}
	{Lookup.majorType == intention2a_vb}
	)
	|
	(
	{Token.string=~"[Ss]omeone"}
	{SpaceToken}
	{Token.kind==word, Token.category== MD}
	{SpaceToken}
	{Token.string =~ "[Hh]elp",Token.length==4}
	{SpaceToken}
	{Token.string =~ "[m]e",Token.length==2}
	)
	|
	(
	({Token.string=~ "[Pp]lease"}|{Token.string=~"[Pp]ls",Token.length==3})
	({SpaceToken}|{Token})[0,1]
	({Token.string =~ "[Hh]elp",Token.length==4}|{Token.string =~ "[Ss]upport",Token.length==7}|{Token.string =~ "[Hh]ave a",Token.length==6})
	)
	|
	(
	{Token.string=~ "[Tt]his",Token.length==4}
	({SpaceToken}|{Token})[0,5]
	{Token.string =~ "[Rr]equest",Token.length==7}
	)
	|
	(
	{Token.string =~ "[Hh]elp",Token.length==4}
	{SpaceToken}
	{Token.string =~ "[Mm]e",Token.length==2}
	)
	|
	(
	{Token.string =~ "[Rr]equest:",Token.length==8}
	)
	
): requestive
-->
: requestive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("requestive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","RequestiveAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Requestive", newFeatures);
}

/**********************************REQUIREMENT***********************************/
/* rule that identifies the directive intention Requirements
* Modified Sept 2017: add length
*/
Rule: RequirementsAct
(
	(
	({!Token.string=~ "[Ii]f",Token.length==2}|{!Token.kind==word, Token.category== WRB})
	{SpaceToken}
	{Token.string=~ "[Ii]",Token.length==1}
	{SpaceToken}
	{Lookup.majorType == intention2c_vb}
	)
	|
	(
	{Token.string=~"[Ii]",Token.length==1}
	({SpaceToken})[1,2]
	{Token.string =~ "[Ww]ould",Token.length==5}
	({SpaceToken}|{Token})[1,3]
	{Token.string=~"[Ll]ike",Token.length==4} 
	({SpaceToken})[1,2]
	{Token.string=~"[Tt]o",Token.length==2} 
	({SpaceToken})[1,2]
	)
	|
	(
	({Token.string=~"[Ii]t",Token.length==2})[0,1]
	{SpaceToken}
	{Token.string=~"[Ww]ould",Token.length==5}
	{SpaceToken}
	({Token}{SpaceToken})[0,1]
	{Token.string=~"[Bb]e", Token.length==2} 
	{SpaceToken}
	({Token.string=="a", Token.length==1}{SpaceToken})[0,1]
	({Token}{SpaceToken})[0,2]
	({Token.string=~"[Nn]ice",Token.length==4}|{Token.string=~"[Gg]reat",Token.length==5}|{Token.string=~"[Ff]eature",Token.length==7}|{Token.string=~"[Hh]elpful",Token.length==7}|{Token.string=~"[Uu]seful",Token.length==6}|{Token.string=~"[Gg]ood",Token.length==4}|{Token.string=~"[Vv]ery",Token.length==4}) 
	)
	|	
	(
	{Token.string=~"[Aa]dd",Token.length==3}
	{SpaceToken}
	({Token.string=~"[Nn]ew"}|{Token.string=~"[Aa]n",Token.length==2}|{Token.string=~"[Aa]",Token.length==1}|{Token.string=~"[Tt]hat",Token.length==4}|{Token.string=="this",Token.length==4})
	{SpaceToken}
	({Token.string=~"[Ff]eature"}|{Token.string=~"[Oo]ption"}|{Token.string=~"[Ff]unction"}|{Token.string=~"[Ff]unctionality"})
	)
	|	
	(
	({Token.string=~"[Aa]",Token.length==1}|{Token.string=~"[Tt]his",Token.length==4})
	{SpaceToken}
	({Token.string=~"[Ff]eature"}|{Token.string=~"[Ff]unction"}|{Token.string=~"[Ff]unctionality"})
	{SpaceToken}
	({Token.string=~"[Ii]n",Token.length==2}|{Token.string=~"[Ll]ike",Token.length==4}|{Token.string=~"[Oo]f",Token.length==2})[0,1]
	)
	|
	(
	{Token.string=~"[Ii]nclude",Token.length==7}
	({SpaceToken}|{Token.string=~"[Aa]",Token.length==1}|{Token.string=~"[Tt]his",Token.length==4}|{Token.string=~"[Tt]hat",Token.length==4})[0,3]
	({Token.string=~"[Ff]eature"}|{Token.string=~"[Ff]unction"}|{Token.string=~"[Ff]unctionality"}) 
	)
	|
	(
	({!Token.string=~"[Ii]f",Token.length==2}{SpaceToken}|{!Token.kind==word, Token.category== WRB}{SpaceToken})[0,1]
	({Token.string=~"[Ii]",Token.length==1}|{Token.string=~"[Mm]y",Token.length==2})
	{SpaceToken}
	({Token.string=~"[Ww]ant"}| {Token.string=~"[Ww]ish"})
	)
	|
	(
	{Token.string=~"[Ii]",Token.length==1}
	{SpaceToken}
	({Token.string=~"[Ww]ould",Token.length==5}|{Token.string=~"[Mm]uch",Token.length==4})
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	({Token.string=~"[Pp]refer",Token.length==6}|{Token.string=~"[Dd]esire",Token.length==6}|{Token.string=~"[Ll]ove",Token.length==6})
	)
	|	
	(
	{Token.string=~"[Ii]t",Token.length==2}
	{SpaceToken}
	({Token.string=~"[Ii]s",Token.length==2}|({Token.string=~"[Ww]ould",Token.length==5}{SpaceToken}{Token.string=~"[Bb]e",Token.length==2}))
	{SpaceToken}
	({Token.string=~"[Dd]esirable",Token.length==9}|{Token.string=~"[Ww]anted",Token.length==6}|{Token.string=~"[Ww]ished",Token.length==6}|{Token.string=~"[Uu]seful",Token.length==6}|{Token.string=~"[Nn]ecessary",Token.length==9})
	)
	
	
): requirement
-->
:requirement
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("requirement");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","RequirementsAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Requirement", newFeatures);
}

/**************************************************************************************************/

/*
* Intention1: Constantive
*
* Itzel Morales Ramirez, FBK, Sept 2013
*
* Rules to annotate expressed intentions of users in mailing list of OSS
* Modified Sept 2017
* Intention1 refers to the communicative illocutionary act:
* Assertive (a) / Informative (b) / Confirmative (c) / Concessive (d) / Descriptive (e) / Suggestive (f) / Suppositive (g) / Responsive (h)
* 
* Category taken from the book Linguistic Communication and Speech Acts by Kent Bach and Robert M. Harnish
*
* The rules are based on the book, the examples in http://www.stanford.edu/~jurafsky/manual.august1.html and the available dataset of XWiki mailing list
*
*/

/************************************INFORMATIVE******************************************/
/* rule that identifies the constative intention Informative=Default*/
Rule: InformativeAct
(
	({Token.length==1,Token.string=~ "[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1b_vb})
	|
	({Token.string == "FYI",Token.length==3}|{Token.string =~ "[Ff]yi",Token.length==3})
): informative
-->
:informative
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("informative");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","InformativeAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Informative", newFeatures);
}

/***********************************SUGGESTIVE**************************************/
/* rule that identifies the constative intention Suggestive
* Modified Sept 2017: add recommendation and others nouns related to suggestion
*/
Rule: SuggestiveAct
(
	(
	{Token.string=~"[Ii]",Token.length==1}
	{SpaceToken}
	({Token.kind==word, Token.category== "MD"}{SpaceToken})[0,1]
	({Token.kind==word, Token.category== "RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1f_vb}
	)
	|
	(
	{Token.string=~"[Yy]ou"}
	{SpaceToken}
	{Token.kind==word, Token.category== "MD"}
	{SpaceToken}
	({Token}{SpaceToken})[0,1]
	({Token.string=~ "[Cc]heck"}| {Token.string=~ "[Ll]ook at"}|{Token.string=~ "[Rr]evise"} | {Token.string=~ "[Tt]ry",Token.length==3}|{Token.string=~"[Cc]onsider"}|{Token.string=~"[Uu]se",Token.length==3}|{TempSuggestive})
	)
	|
	(
	({Token.string=~"[Oo]ne",Token.length==3}|{Token.string=~"[Mm]y",Token.length==2})
	{SpaceToken}
	({Token}{SpaceToken})[0,1]
	({Token.string=~"[Ss]uggestion"}|{Token.string=~"[Ss]uggestions"}|{Token.string=~"[Rr]ecommendation"}|{Token.string=~"[Rr]ecommendations"}|{Token.string=~"[Pp]roposal"}|{Token.string=~"[Pp]roposition"}|{Token.string=~"[Pp]lan"})
	({SpaceToken}|{Token.string=~"[Tt]hat"})[0,2]
	)
	|
	(
	{TempSuggestive, TempSuggestive notWithin TempNSuggestive}
	)	
	|
	(
	{Token.string=~"[Pp]lease"}{SpaceToken}{Token.kind==word, Token.category== "VB", !Token.string=="help"}
	)
	|
	(
	{TempSuggestive, TempSuggestive notWithin CODE_LINE}
	)
	
): suggestive
-->
:suggestive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("suggestive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","SuggestiveAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Suggestive", newFeatures);
}

/***********************************SUPPOSITIVE**************************************/
/* rule that identifies the directive intention Suppositive*/
Rule: SuppositiveAct
(
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1g_vb}
	{SpaceToken}
	({Token.string=~"[Yy]our",Token.length==4}|{Token.string=~"[Tt]he",Token.length==3}|{Token.string=~"[Tt]his",Token.length==4}|{Token.string=~"[Tt]hat",Token.length==4}|{Token.string=~"[Ii]t",Token.length==2})[0,1]
	)
	|
	({Token.string=~"[Mm]aybe"}|{Token.string=~"[Mm]ight"})
): suppositive
-->
:suppositive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("suppositive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","SuppositiveAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Suppositive", newFeatures);
}


/***********************************ASSERTIVE**************************************/
/* rule that identifies the constative intention Assertive*/
Rule: AssertiveAct
(
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1a_vb}
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.string=~"[Hh]ave",Token.length==4}|{Token.string=~"[Gg]et",Token.length==3}|{Token.string=~"[Hh]ad",Token.length==3}|{Token.string=~"[Gg]ot",Token.length==3}|{Token.string=~"[Cc]an",Token.length==3})
	{SpaceToken}
	{Token}
	{SpaceToken}
	{Token, !TempSentN}
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token.string=~"[Aa]m",Token.length==2}
	{SpaceToken}
	({Token.string=~"[Hh]aving"}|{Token.string=~"[Gg]etting"}|{Token.string=~"[Ee]xperiencing"}|{Token.string=~"[Ee]ncountering"})
	{SpaceToken}
	{Token}
	)
	

): assertive
-->
: assertive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("assertive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","AssertiveAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Assertive", newFeatures);
}

/***********************************CONCESSIVE**************************************/
/* rule that identifies the directive intention Concessive*/
Rule: ConcessiveAct
(
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1d_vb}
	)
	|
	(
	{Token.kind == word, Token.category== RB}
	{SpaceToken}
	{Token.string=~ "[Ss]ure",Token.length==4}
	{SpaceToken}
	({Token.string=~ "[Ii]f",Token.length==2}{SpaceToken})[0,1]
	{Token.string=~ "[Ii]",Token.length==1}
	{SpaceToken}
	({Token.string=~ "[Uu]nderstand"}|{Token.string=~ "[Cc]omprehend"}|{Token.string=~ "[Gg]et the picture"}|{Token.string=~ "[Gg]rasp"}|{Token.string=~ "[Cc]atch"}|{Token.string=~ "[Ii]nterpret"}|{Token.string=~ "[Kk]now"})
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token.string=~"[Hh]ave",Token.length==4}
	{SpaceToken}
	{Token.string=~"[Nn]o",Token.length==2}
	{SpaceToken}
	({Token.string=~"[Ii]dea",Token.length==4}|{Token.string=~"[Cc]lue",Token.length==4})
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token.string=~"[Dd]o not", Token.length==6}
	{SpaceToken}
	{Token.string=~"[Hh]ave",Token.length==4}
	{SpaceToken}
	({Token.string=~"[Aa]ny",Token.length==3}|{Token.string=~"[Aa]n",Token.length==2}|{Token.string=~"[Aa]",Token.length==1})
	{SpaceToken}
	({Token.string=~"[Ii]dea",Token.length==4}|{Token.string=~"[Cc]lue",Token.length==4})
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token.string=~"[Aa]m",Token.length==2}
	{SpaceToken}
	({Token.string=~"[Aa]",Token.length==1}{SpaceToken}({Token.string=~"[Bb]it",Token.length==3}|{Token.string=~"[Ll]ittle"}|{Token.string=~"[Nn]ot",Token.length==3}){SpaceToken})[0,1]
	({Token.string=~"[Cc]onfused"}|{Token.string=~"[Ss]ure",Token.length==4}|{Token.string=~"[Uu]nsure"})
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token.string=~"[Aa]m",Token.length==2}
	{SpaceToken}
	{Token.kind==word, Token.category==RB}
	({SpaceToken}|{Token})[0,3]
	{Token.string=~"[Ee]xpert"}
	)
	|
	(
	({Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken})[0,1]
	({Token.kind==word, Token.category== RB}{SpaceToken})[0,1]
	(({Token.string=~"[Dd]o",Token.length==2}|{Token.string=~"[Dd]id",Token.length==3}) {SpaceToken}
	{Token.kind==word, Token.category== RB})
	({SpaceToken}|{Token})[1,3]
	({Token.string=~"[Uu]nderstand"}|{Token.string=~"[Kk]now",Token.length==4}|{Token.string=~ "[Cc]omprehend"}|{Token.string=~ "[Gg]et the picture"}|{Token.string=~ "[Gg]rasp"}|{Token.string=~ "[Cc]atch"}|{Token.string=~ "[Ii]nterpret"})
	{SpaceToken}
	({Token.string=~"[Ii]f",Token.length==2}|{Token.string=~"[Aa]bout"})[0,1]
	)	
	|
	(
	({Token.length==1,Token.string=~"[Ii]"}{SpaceToken}{Token.string=~"[Aa]m",Token.length==2})
	{SpaceToken}
	{Token.kind == word, Token.category == RB}
	{SpaceToken}	
	{Token.string=~"[Aa]ble"}
	{SpaceToken}
	{Token.kind==word, Token.category==TO}
	{SpaceToken}
	{Token.string=~"[Ee]xplain"}
	)
): concessive
-->
: concessive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("concessive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","ConcessiveAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Concessive", newFeatures);
}
/***********************************DESCRIPTIVE**************************************/
/* rule that identifies the constative intention Descriptives*/

Rule: DescriptivesAct
(
(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1e_vb}
	)
	|
	(
	({Token.string=~"[Dd]escribed"}|{Token.string=~"[Rr]eproduced"}|{Token.string=~"[Dd]epicted"})
	{SpaceToken}
	({Token.string=~"[Oo]n",Token.length==2}|{Token.string=~"[Ii]n",Token.length==2})
	)
	|
	(
	{Token.string=~"[Yy]ou"}
	{SpaceToken}
	{Token.kind==word, Token.category=="MD"}
	{SpaceToken}
	{Token.string=~"[Ss]ee",Token.length==3}
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token}
	{SpaceToken}
	{Token.string=~"[Tt]ried", Token.length==5}	
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token}{SpaceToken}) [0,1]
	({Token.string=~"[Dd]id",Token.length==3})
	({SpaceToken}{Token.kind==word, Token.category=="VB"})[0,1]
	)
	|
	(
	({Token.string=~"[Ii]mmediately"}
	{SpaceToken})[0,1]
	{Token.string=~"[Aa]fter",Token.length==5}
	{SpaceToken}
	({Token.string=~"[Tt]hat",Token.length==4}{SpaceToken}{Token.kind==word, Token.category=="VBD"})[0,1]
	)
	|
	(
	{Token.string=~"[Ww]hen", Token.length==4}
	({SpaceToken}|{Token})[0,8]
	({Token.kind==word, Token.category=="VBZ"}|{Token.kind==word, Token.category=="VBG"})
	({SpaceToken}|{Token})[0,1]
	({Token.string=~"[Gg]o to",Token.length==5})[0,1]
	)
	|
	(
	({Token.string=~"[Ww]hen", Token.length==4}|{Token.string=~"[Ww]henever", Token.length==8}|{Token.string=~"[Oo]nce", Token.length==4})
	{SpaceToken}
	({Token.string=~"[Ii]", Token.length==1}|{Token.string=~"[Yy]ou", Token.length==3})
	{SpaceToken}
	{Token.kind==word, Token.category=="VB"}
	)
	|
	(
	{Token.string=~"[Tt]o", Token.length==2}
	{SpaceToken}
	({Token.string=~"[Rr]eproduce",Token.length==9}|{Token.string=~"[Dd]uplicate",Token.length==9}|{Token.string=~"[Rr]eplicate",Token.length==9})
	)
	

		
): descriptive
-->
: descriptive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("descriptive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","DescriptivesAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Descriptive", newFeatures);
}


/***********************************RESPONSIVE**************************************/
/* rule that identifies the constative intention Responsives*/
/* Speech act expressed by the expert when replying a request, the expert might include some instructions, procedure, steps */
Rule: ResponsivesAct
(
(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken})[0,1]
	{Lookup.majorType==intention1h_vb}
	)
	|
	(
	{Token.string=~"[Ii]",Token.length==1}
	{SpaceToken}
	{Token.string=~"[Hh]ope"}
	{SpaceToken}
	({Token}{SpaceToken})*
	({Token.string=~"[Hh]elps"}|{Token.string=~"[Hh]elp"}|{Token.string=~"[Ww]ork"}|{Token.string=~"[Ww]orks"})
	)
	|
	(
	{Token.string=~"[Hh]ope"}
	{SpaceToken}
	({Token}{SpaceToken})*
	({Token.string=~"[Hh]elps"}|{Token.string=~"[Hh]elp"}|{Token.string=~"[Ww]ork"}|{Token.string=~"[Ww]orks"})
	)
	|
	({Token.string=="HTH",Token.length==3}|{Token.string=~"[Hh]th",Token.length==3}|{Token.string=="AFAIC",Token.length==5}|{Token.string=~"[Aa]faic",Token.length==5}|{Token.string=="AFAIK",Token.length==5}|{Token.string=~"[Aa]faik",Token.length==5}|{Token.string=="IMHO",Token.length==4}|{Token.string=~"[Ii]mho",Token.length==4}|{Token.string=="IMO",Token.length==3}|{Token.string=~"[Ii]mo",Token.length==3})
	|
	(
	{Token.string=~"[Gg]lad",Token.length==4}
	{SpaceToken}
	{Token.string=~"[Tt]o",Token.length==2}
	{SpaceToken}
	{Token.string=~"[Bb]e",Token.length==2}
	{SpaceToken}
	({Token.string=~"[Uu]seful"}|{Token.string=~"[Hh]elpful"})
	)
	|
	(
	({Token.string=~"[Ii]t",Token.length==2}|{Token.string=~"[Tt]hat",Token.length==4}|{Token.string=~"[Tt]his",Token.length==4})
	{SpaceToken}
	{Token.kind==word, Token.category== MD}
	{SpaceToken}
	({Token.string=~"[Ww]ork",Token.length==4}|{Token.string=~"[Ss]olve"}|{Token.string=~"[Ff]ix",Token.length==3})
	)
	|
	(
	({Token.string=~"[Ii]t",Token.length==2}|{Token.string=~"[Tt]hat",Token.length==4}|{Token.string=~"[Tt]his",Token.length==4})
	{SpaceToken}
	{Token.kind==word, Token.category== MD}
	{SpaceToken}
	({Token.kind==word, Token.category== RBS}{SpaceToken})[0,1]
	({Token.kind==word, Token.category== RB}{SpaceToken})[0,1]
	({Token.string=~"[Ww]ork",Token.length==4}|{Token.string=~"[Ss]olve"}|{Token.string=~"[Ff]ix",Token.length==3})
	)
	|
	(
	({Token.string=~"[Ss]ee",Token.length==3}|{Token.string=~"[Rr]ead",Token.length==4})
	{SpaceToken}
	({Token.string=~"[Tt]his",Token.length==4}|{Token.string=~"[Bb]elow"}|{Token.string=~"[Nn]ext"})
	)
	|
	(
	{Token.string=~"[Ii]ndeed"}
	)
	|
	(
	{Token.string=~"[Ll]et", Token.length==3}
	{SpaceToken}
	({Token.string=~"[Mm]e", Token.length==2}|{Token.string=~"[Uu]s", Token.length==2})
	{SpaceToken}
	{Token.string=~"[Kk]now"}
	)
	
): responsive
-->
: responsive
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("responsive");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","ResponsivesAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Responsive", newFeatures);
}

/***********************************CONFIRMATIVE**************************************/
/* rule that identifies the constative intention Confirmatives*/
Rule: ConfirmativesAct
(
	(
	{Token.length==1,Token.string=~"[Ii]"}
	({SpaceToken}|{SpaceToken}{Token.string=~"[Dd]id",Token.length==3}{SpaceToken}{Token.kind==word, Token.category== RB}{SpaceToken}|{SpaceToken}{Token.string=~"[Hh]ave",Token.length==4}{SpaceToken}{Token.kind==word, Token.category== RB}{SpaceToken}|{SpaceToken}{Token.kind==word, Token.category== MD}{SpaceToken}|{SpaceToken}{Token.string=="[Cc]an",Token.length==3}{SpaceToken})
	{Lookup.majorType==intention1c_vb}
	)
	|
	(
	{Token.string=~"[Yy]ou",Token.length==3}
	{SpaceToken}
	({Token.string=~"[Aa]re",Token.length==3}|{Token.string=~"[Ww]ere",Token.length==4})
	{SpaceToken}
	({Token.string=~"[Rr]ight"}|{Token.string=~"[Cc]orrect"})
	)
		
): confirmative
-->
: confirmative
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("confirmative");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","ConfirmativesAct");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Confirmative", newFeatures);
}


/***********************************************************************************************/
/*
* Intention3 Expressive
*
* Itzel Morales Ramirez, FBK, Sept 2013, Modified 18 Nov 2013: type of control from all to brill
*
* Rules to annotate expressed intentions of users in mailing list of OSS
*
* Intention3 refers to the communicative illocutionary acts:
* Thank (3a) / Accept (3b) / Reject(3c) / Negative opinion (3d) / Positive opinion (3e)
*
* Category taken from Searle and adapted from the book Linguistic Communication and Speech Acts by Kent Bach and Robert M. Harnish
*
* The rules are based on the book, the examples in http://www.stanford.edu/~jurafsky/manual.august1.html and the available dataset of XWiki mailing list
*
*/

/******************************************THANK*****************************************/
/* rule that identifies the expressive intention THANK*/
Rule: ThankRule
(
	({Token.string=~"[Tt]hanks"}|{Token.string=~"[Tt]hank"}{SpaceToken}{Token.string=~"[Yy]ou"})
	
): thank
-->
: thank
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("thank");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","ThankRule");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Thank", newFeatures);
}



/******************************************ACCEPT*****************************************/
/* rule that identifies the expressive intention Accept*/
Rule: AcceptRule
(
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	({Token.kind==word, Token.category=="RB"}{SpaceToken}|{Token.kind==word, Token.category=="MD"}{SpaceToken})[0,1]
	{Token.string=~"[Aa]gree"}
	)	
	|
	(
	{SpaceToken}
	{Token.string=="+1",Token.length==2}
	{SpaceToken}
	)	
	|
	(
	{Token.string=="+1",Token.length==2}
	{SpaceToken}
	)	
	|
	(
	{Token.string=~"[Aa]gree"}
	{SpaceToken}
	{Token.string=~"[Oo]n",Token.length==2}
	)	
): accept
-->
: accept
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("accept");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","AcceptRule");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Accept", newFeatures);
}

/******************************************REJECT******************************************/
/* rule that identifies the expressive intention Reject*/
Rule: RejectRule
(
	(
	{Token.length==1,Token.string=~"[Ii]"}
	({SpaceToken}|{Token})[1,7]
	({Token.string=~"[Dd]isagree"}|{Token.string=~"[Dd]eny"})
	)	
	|
	(
	{Token.string=~"[Ii]",Token.length==1}
	{SpaceToken}
	{Token.string=~"[Dd]o",Token.length==2}
	{SpaceToken}
	{Token.kind==word, Token.category==RB}
	{SpaceToken}
	({Token.string=~"[Tt]hink"}|{Token.string=~"[Bb]elieve"})
	)

): reject
-->
: reject
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("reject");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","RejectRule");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Reject", newFeatures);
}

/**********************************NEGATIVE OPINION**************************************/
/* Speech act expresses a negative emotions according to Searle's classification Paper pag364 and SentiNet*/
Rule: ExpressiveActNeg
(
	({TempSentN notWithin Others,  TempSentN notWithin CODE_LINE})
	|
	(
	({Token.length==1,Token.string=~"[Ii]"})[0,1]
	({SpaceToken})[0,1]
	({Token.kind==word, Token.category=="MD"}|{Token.string=~"[Dd]o",Token.length==2})
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	{Token.kind==word, Token.category=="VB"}
	)
	|
	(
	{Token.length==1,Token.string=~"[Ii]"}
	{SpaceToken}
	{Token.kind==word, Token.category=="MD"}
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	{Token.kind==word, Token.category=="RB"}
	)
	|
	(
	({Token.string=~"[Ii]t is"}|{Token.string=~"[Ii]s",Token.length==2}|{Token.string=~"[Ii]t",Token.length==2}|{Token.string=~"[Ii]ts"})
	{SpaceToken}
	({Token.string=~"[Ff]ailing"}|{Token.string=~"[Ff]ails"})
	)
	|
	({Token.string=~"[Ii]t",Token.length==2}{SpaceToken}{Token.string=="'s",Token.length==2})
{SpaceToken}
	({Token.string=~"[Ff]ailing"})
	|
	(
	({Token.string=~"[Ii]t is"}|{Token.string=="is",Token.length==2}|{Token.string=~"[Ii]t",Token.length==2}|{Token.string=~"[Ii]ts"})
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	{Token.string=="working"}
	)
	|
	({Token.string=~"[Ii]t",Token.length==2}{SpaceToken}{Token.string=="'s",Token.length==2})
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	{Token.string=~"[Ww]orking"}
	|
	(
	({Token.string=~"[Dd]oes",Token.length==4}|{Token.string=~"[Dd]o",Token.length==2}|{Token.string=~"[Dd]id",Token.length==3})
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2}|{Token.string=~"[Nn]othing"})
	{SpaceToken}
	({Token.string=~"[Ww]ork"})[0,1]
	)
	|
	(
	({Token.string=~"[Nn]othing"}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	({Token}{SpaceToken})[0,1]
	({Token.string=~"[Ww]orks"}|{Token.string=~"[Ww]ork"})
	)
	|
	(
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	{Token.string=~"[Aa]ble",Token.length==4}
	)
	|
	(
	({Token.string=~"[Tt]his",Token.length==4}|{Token.string=~"[Tt]he",Token.length==3}|{Token.string=~"[Mm]y",Token.length==2})
	{SpaceToken}
	({Token.kind==word, Token.category=="JJ"}|{SpaceToken})[0,3]
	({Token.string=~"[Pp]roblem"}|{Token.string=~"[Tt]rouble"}|{Token.string=~"[Ii]ssue"}|{Token.string=~"[Ee]rror"})
	)
	|
	(
	{Token.kind==word, Token.category=="EX"}
	({SpaceToken}|{Token})[2,9]
	({Token.string=~"[Pp]roblem"}|{Token.string=~"[Pp]roblems"}|{Token.string=~"[Ii]ssue"}|{Token.string=~"[Ii]ssues"}|{Token.string=~"[Bb]ug"}|{Token.string=~"[Bb]ugs"})
	)
	|
	(
	({Token.kind==word, Token.category=="DT", Token.orth=="lowercase"}|{Token.kind==word, Token.category=="DT", Token.orth=="upperInitial"}|{Token.string=~"[Kk]nown"})
	{SpaceToken}
	{TempNegative}
	)
	|
	(
	(({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2}){SpaceToken}({Token.kind==word, Token.category=="VBG"}|{Token.kind==word, Token.category=="VBN"}))
	)
	|
	(
	({Token.string=~"[Aa]re",Token.length==3}|{Token.string=~"[Ii]s",Token.length==2}|{Token.string=="'s",Token.length==2})
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	{SpaceToken}
	({Token.kind==word, Token.category=="JJ"}|({Token.kind==word, Token.category=="DT"}{SpaceToken}{Token}))
	)
	|
	({Token.string=="SAD",Token.length==3}|{Token.string=="[Ss]ad",Token.length==3})
	|
	(
	{Token.kind==word, Token.category== EX}
	{SpaceToken}
	({Token.string=~"[Ww]as",Token.length==3}|{Token.string=~"[Ww]ere",Token.length==4})
	{SpaceToken}
	({Token.string=~"[Nn]ot",Token.length==3}|{Token.string=~"[Nn]o",Token.length==2})
	)
	|
	(
	{TempSentN}
	{SpaceToken}
	({Token.string=~"[Ii]n",Token.length==2}|{Token.string=~"[Tt]o",Token.length==2})
	{SpaceToken}
	({Token.kind==word, Token.category=="DT"}|{Token.kind==word, Token.category=="VB"})
	)
	
		
): expressiveN
-->
: expressiveN
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("expressiveN");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","ExpressiveActNeg");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"NEG_opinion", newFeatures);
}


/**********************************POSITIVE OPINION**************************************/
/* Speech act expresses a positive emotion according to Searle's classification Paper pag364 and SentiNet*/
Rule: ExpressiveActPos
(
	({TempSentP notWithin Others,  TempSentP notWithin CODE_LINE})
	|
	({Token.length==2,Token.string=~"[Ii]t"}|{Token.length==4,Token.string=~"[Ii]t's"}|{Token.length==3,Token.string=~"[Ii]ts"}|{Token.length==5,Token.string=~"[Ii]t 's"})
	({SpaceToken}|{Token})[1,4]
	({Token.string=~"[Ww]orks"}|{Token.string=~"[Ww]orking"}|{Token.string=~"[Ww]orked"}|{Token.string=~"[Ww]ork"})
	|
	({Token.string=="SMILEY"}|{Token.string=~"[Ss]miley"})
	|
	{TempSentP notWithin TempSentN}
	|
	{TempSentP , TempSentN}
	|
	({!Token.string=~"[Nn]o",Token.length==2}|{!Token.string=~"[Nn]ot",Token.length==3})
	{SpaceToken}
	{TempSentP}
	
): expressiveP
-->
: expressiveP
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("expressiveP");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","ExpressiveActPos");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"POS_opinion", newFeatures);
}


/***********************************************************************************************/
/*
* Intention4 Non-linguistic
*
* Itzel Morales Ramirez, FBK, Sept 2013, Modified 18 Nov 2013: type of control from all to brill
*
* Rules to annotate expressed intentions of users in mailing list of OSS
*
* Intention4 refers to the non-linguistic acts:
* Attach
*
* Category added
*
* The rules are based on the examples in http://www.stanford.edu/~jurafsky/manual.august1.html and the available dataset of XWiki mailing list
*
*
*({UrlPre}({Token, !QuestionMark}|{Others}|{CODE_LINE})[4,22]({SpaceToken})[0,1])*/
Rule: AttachRule
(
	
	({Token.string =~ "[Hh]ttp"}|	
	{Token.string =~ "[Ff]tp"})
	{Token.string == ":"}
	{Token.string == "/"}
       	{Token.string == "/"}
	{Token.string == "www"}
        {Token.string == "."}
		
): attach
-->
: attach
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("attach");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","AttachRule");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"URL_link", newFeatures);
}


Rule: AttachRule0
(
	(({Token.kind==word, Token.category=="DT"}|{Token.string =~ "[Mm]y",Token.length==2})
	{SpaceToken}
	{Token.string =~ "[Ll]og",Token.length==3}
	({SpaceToken}
	{Token.string=~"[Ff]ile",Token.length==4})[0,2])
	|
	({Token.string =~ "[Ll]og",Token.length==3}
	{SpaceToken}
	{Token.string=~"[Ff]ile",Token.length==4})
	
): attach0
-->
: attach0
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("attach0");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","AttachRule0");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"LOG_FILE", newFeatures);
}

Rule: AttachRule1
(
	(
	{Token.string =~ "[Ii]", Token.length==1}
	{SpaceToken}
	{Token.string=~"[Aa]ttach",Token.length==6}
	)
	|
	(
	({Token.string =~ "[Cc]reated"}|{Token.string =~ "[Ss]ee", Token.length==3})
	{SpaceToken}
	{Token.string=~"[Aa]ttachment"}
	)
	|
	(
	({Token.string =~ "[Tt]he", Token.length==3}|{Token.kind==word, Token.category=="NN"})
	{SpaceToken}
	{Token.string=~"[Aa]ttached"}
	)
	|
	({Token.string=~"[Aa]ttached"})
		
): attach1
-->
: attach1
{
gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("attach1");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","AttachRule1");
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"Attachment", newFeatures);
}








